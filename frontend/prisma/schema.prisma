// docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// region Auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Job           Job[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// endregion Auth

// App models

model Job {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  id        String   @id @default(cuid())
  url       String   @unique
  createdAt DateTime @default(now())

  company     String?
  title       String?
  description String?
  notes       String?

  resume Resume[]
}

model ContactInfo {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  phone   String
  resumes Resume[]
}

model Position {
  id Int @id @default(autoincrement())

  title           String
  startDate       DateTime
  endDate         DateTime
  location        String
  accomplishments String

  experienceId Int?
  experience   Experience? @relation(fields: [experienceId], references: [id])

  skillPosition PositionSkill[]

  @@index([experienceId])
}

model Experience {
  id Int @id @default(autoincrement())

  companyName String
  link        String
  positions   Position[]
  Resume      Resume[]
}

// Enum for Education type
enum EducationType {
  EDUCATION
  CERTIFICATION
}

model Skill {
  id            Int             @id @default(autoincrement())
  name          String          @unique // e.g. "JavaScript"
  positionSkill PositionSkill[]
}

model PositionSkill {
  id Int @id @default(autoincrement())

  positionId Int
  skillId    Int

  position Position @relation(fields: [positionId], references: [id])
  skill    Skill    @relation(fields: [skillId], references: [id])

  @@unique([positionId, skillId])
}

model Education {
  id Int @id @default(autoincrement())

  type        EducationType
  institution String
  distinction String
  startDate   DateTime
  endDate     DateTime
  location    String
  link        String
  notes       String
  Resume      Resume[]
}

model Patent {
  id Int @id @default(autoincrement())

  title       String   @db.VarChar(255) // Add length constraint
  description String   @db.Text
  link        String   @db.VarChar(255)
  date        DateTime
}

enum SectionType {
  EXPERIENCE     @map("Experience")
  EDUCATION      @map("Education")
  CERTIFICATION  @map("Certification")
  SKILLS_SUMMARY @map("Skills Summary")
  PATENTS        @map("Patents")
}

model Section {
  id Int @id @default(autoincrement())

  title String      @db.VarChar(255) // Add length constraint
  type  SectionType

  resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId Int?
}

model Resume {
  id   Int    @id @default(autoincrement())
  name String @unique @default("Default Resume")

  // base resume has a null jobId
  jobId String?
  Job   Job?    @relation(fields: [jobId], references: [id])

  contactInfoId Int?
  contactInfo   ContactInfo? @relation(fields: [contactInfoId], references: [id])
  summary       String       @default("")

  sections     Section[]
  education    Education?  @relation(fields: [educationId], references: [id])
  educationId  Int?
  experience   Experience? @relation(fields: [experienceId], references: [id])
  experienceId Int?
}
